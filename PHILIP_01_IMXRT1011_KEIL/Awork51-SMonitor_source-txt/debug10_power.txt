

=======================power管理相关初始化==GPT，button=========================


flow： 

main --> BOARD_InitBootPins --> BOARD_InitDebugConsole --> BOARD_InitBootPeripherals --> SetLowPowerClockGate
               --> LPM_Init 
 

-------------------------------------------------------------------------------------------



main()

    //跟其他项目一样，先跳过
    BOARD_ConfigMPU();  //--same

    //跟其他项目一样，先跳过
    BOARD_InitBootClocks();  //--same


    //初始化uart引脚P1.09 P1.10 ，初始化按键引脚P1.0, 初始化ADC引脚P.AD9
    //BOARD_InitBootPins();
          BOARD_InitPins();


    //手动清除外围部件的停止标志
    IOMUXC_GPR->GPR4  = 0;
    IOMUXC_GPR->GPR7  = 0;
    IOMUXC_GPR->GPR8  = 0;
    IOMUXC_GPR->GPR12 = 0;


    //设置uart的时钟源到24M （待查看寄存器）
    CLOCK_SetMux(kCLOCK_UartMux, 1);   
 
    //设置uart的分频为1分频（待查看寄存器）
    CLOCK_SetDiv(kCLOCK_UartDiv, 0);      

    //设置uart参数，启动uart
    BOARD_InitDebugConsole();

    //设置GPT2的时钟源为LowFreq，分频系数为1分频, 先关闭GPT2的所有中断使能
    //BOARD_InitBootPeripherals();
    //    BOARD_InitPeripherals();
             DEMO_GPT_init()


    //关闭不需要的时钟 （或者休眠时关闭，工作时打开）
    SetLowPowerClockGate();

    //关闭USBPHY 时钟
    CLOCK_DisableUsbhs0PhyPllClock();

    //关闭USBPHY外设
    PowerDownUSBPHY();
 
    //打印这次是由什么唤醒的
    PRINTF("\r\nCPU wakeup source 0x%x...\r\n", SRC->SRSR);

    //打印所有的时钟频率列表
    APP_PrintRunFrequency(0);

    //关于电源管理的时钟设置， 待理解先跳过
    LPM_Init(); 


    while (1)
    
         //取得cpu主频
        freq = CLOCK_GetFreq(kCLOCK_CpuClk);

        //打印cpu主频
        PRINTF("    Core Clock = %dHz \r\n", freq);

       //打印当前的电源模式，及所用到的时钟频率列表
        APP_ShowPowerMode(s_curRunMode);



-------------------------

SetLowPowerClockGate()

    CLOCK_ControlGate(kCLOCK_Aips_tz1, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Aips_tz2, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Mqs, kCLOCK_ClockNotNeeded);                //--关闭 Mqs
    CLOCK_ControlGate(kCLOCK_FlexSpiExsc, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Dcp, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Lpuart3, kCLOCK_ClockNotNeeded);         //--关闭 Lpuart3
    CLOCK_ControlGate(kCLOCK_Trace, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Gpt2, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Gpt2S, kCLOCK_ClockNotNeeded);         //--关闭 Gpt2S
    CLOCK_ControlGate(kCLOCK_Lpuart2, kCLOCK_ClockNotNeeded);         //--关闭 Lpuart2
    CLOCK_ControlGate(kCLOCK_Gpio2, kCLOCK_ClockNotNeeded);         //--关闭 Gpio2
    CLOCK_ControlGate(kCLOCK_Lpspi1, kCLOCK_ClockNotNeeded);         //--关闭 Lpspi1
    CLOCK_ControlGate(kCLOCK_Lpspi2, kCLOCK_ClockNotNeeded);         //--关闭 Lpspi2
    CLOCK_ControlGate(kCLOCK_Pit, kCLOCK_ClockNotNeeded);         //--关闭 
    CLOCK_ControlGate(kCLOCK_Adc1, kCLOCK_ClockNotNeeded);         //--关闭 Adc1
    CLOCK_ControlGate(kCLOCK_Gpt1, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Gpt1S, kCLOCK_ClockNotNeeded);         //--关闭 Gpt1S
    CLOCK_ControlGate(kCLOCK_Lpuart4, kCLOCK_ClockNotNeeded);         //--关闭 Lpuart4
    CLOCK_ControlGate(kCLOCK_Gpio1, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Csu, kCLOCK_ClockNotNeeded);         //--关闭  Csu
    CLOCK_ControlGate(kCLOCK_Gpio5, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_OcramExsc, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_IomuxcSnvs, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Lpi2c1, kCLOCK_ClockNotNeeded);         //--关闭 Lpi2c1
    CLOCK_ControlGate(kCLOCK_Lpi2c2, kCLOCK_ClockNotNeeded);         //--关闭 Lpi2c2
    CLOCK_ControlGate(kCLOCK_Ocotp, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Xbar1, kCLOCK_ClockNotNeeded);         //--关闭 Xbar1
    CLOCK_ControlGate(kCLOCK_Ewm0, kCLOCK_ClockNotNeeded);         //--关闭 Ewm0
    CLOCK_ControlGate(kCLOCK_Wdog1, kCLOCK_ClockNotNeeded);         //--关闭  Wdog1
    CLOCK_ControlGate(kCLOCK_FlexRam, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_IomuxcSnvsGpr, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Sim_m7_clk_r, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Iomuxc, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_IomuxcGpr, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_SimM7, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_SimM, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_SimEms, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Pwm1, kCLOCK_ClockNotNeeded);         //--关闭 Pwm1
    CLOCK_ControlGate(kCLOCK_Rom, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Flexio1, kCLOCK_ClockNotNeeded);         //--关闭 Flexio1
    CLOCK_ControlGate(kCLOCK_Wdog3, kCLOCK_ClockNotNeeded);         //--关闭 Wdog3
    CLOCK_ControlGate(kCLOCK_Dma, kCLOCK_ClockNotNeeded);             //--关闭   Dma  
    CLOCK_ControlGate(kCLOCK_Kpp, kCLOCK_ClockNotNeeded);             //--关闭  Kpp
    CLOCK_ControlGate(kCLOCK_Wdog2, kCLOCK_ClockNotNeeded);         //--关闭 Wdog2
    CLOCK_ControlGate(kCLOCK_Spdif, kCLOCK_ClockNotNeeded);         //--关闭   Spdif
    CLOCK_ControlGate(kCLOCK_Sai1, kCLOCK_ClockNotNeeded);           //--关闭   Sai1
    CLOCK_ControlGate(kCLOCK_Sai3, kCLOCK_ClockNotNeeded);           //--关闭   Sai3
    CLOCK_ControlGate(kCLOCK_Lpuart1, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_SnvsHp, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_SnvsLp, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_UsbOh3, kCLOCK_ClockNotNeeded);         //--关闭 UsbOh3
    CLOCK_ControlGate(kCLOCK_Dcdc, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_FlexSpi, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Trng, kCLOCK_ClockNotNeeded);            //--关闭 Trng
    CLOCK_ControlGate(kCLOCK_SimPer, kCLOCK_ClockNeededRun);
    CLOCK_ControlGate(kCLOCK_Anadig, kCLOCK_ClockNeededRun);



----------------

//初始化uart引脚P1.09 P1.10 ，初始化按键引脚P1.0, 初始化ADC引脚P.AD9
BOARD_InitPins( )  
     
   //CLOCK_EnableClock(kCLOCK_Iomuxc);         //设置CCGR4.3-2=3
        CLOCK_ControlGate(kCLOCK_Iomuxc, 3);    //设置引脚复用的时钟模式为常开（进入WAIT时也开）  

 //设置 GPIO_00 (pin 13) 为输入引脚
  gpio_pin_config_t AUD_INT_config =  { kGPIO_DigitalInput, 0, kGPIO_IntRisingEdge, };        //--same as button 
  GPIO_PinInit(GPIO1, 0U, &AUD_INT_config);

  //使能P1.0中断
  GPIO_PortEnableInterrupts(GPIO1, 1U << 0U);     //--same as button 
 
    //EnableIRQ(EXAMPLE_SW_IRQ);     //？  need

 
  IOMUXC_SetPinMux(IOMUXC_GPIO_00_GPIOMUX_IO00, 0U);       //--same as button 
  IOMUXC_SetPinMux(IOMUXC_GPIO_09_LPUART1_RXD, 0U);          //--same
  IOMUXC_SetPinMux(IOMUXC_GPIO_10_LPUART1_TXD, 0U);          //--same
  IOMUXC_SetPinMux(IOMUXC_GPIO_AD_09_ARM_TRACE_SWO, 0U);  
 
  IOMUXC_SetPinConfig(IOMUXC_GPIO_00_GPIOMUX_IO00, 0x01B0A0U);     //--same as button 
  IOMUXC_SetPinConfig(IOMUXC_GPIO_09_LPUART1_RXD, 0x10A0U);           //--same
  IOMUXC_SetPinConfig(IOMUXC_GPIO_10_LPUART1_TXD, 0x10A0U);           //--same
  IOMUXC_SetPinConfig(IOMUXC_GPIO_AD_09_ARM_TRACE_SWO, 0x90B1U); 
 

----------------

//设置GPT2的时钟源为LowFreq，分频系数为1分频, 先关闭GPT2的所有中断使能
DEMO_GPT_init( )  

    //功能: 使能GPT2的时钟为常开, 设置CCGR?.3-2=3；GPT 软件复位；比较后计数清0，不使能debug模式
       在停止模式也使能，在休眠模式也使能，使能GPT2时计时器清0；设置GPT2的时钟源为LowFreq，分频系数为1分频
    GPT_Init(GPT2, &DEMO_GPT_config);

    GPT_SetClockDivider(base, initConfig->divider);

    //PR.11-0=0, 分频系数为1分频
    GPT_SetOscClockDivider(GPT2, 1);
             base->PR =  PR & (0<<11);


    //关闭GPT2的所有中断使能
    //GPT_EnableInterrupts(GPT2, 0);
         base->IR |= 0;   //先关闭GPT2的所有中断使能
 

---

//功能: 使能GPT2的时钟为常开（进入WAIT时也开）；GPT 软件复位；比较后计数清0；
   在wait模式，停止模式，休眠模式都使能，在debug模式不使能；
   不使能GPT2后计时器清0，设置GPT2的时钟源为LowFreq，分频系数为1分频。
//参数 GPT2，DEMO_GPT_config
GPT_Init( *base,  *initConfig)

    //使能GPT的时钟, 设置CCGR?.3-2=3，时钟模式为常开（进入WAIT时也开）  ；
    CLOCK_EnableClock(s_gptClocks[GPT_GetInstance(base)]);
 
    base->CR = 0;

    //GPT 软件复位
    //GPT_SoftwareReset(base);
        base->CR |= (1<<15);   //CR.15=1,  启动GPT软复位
        while (CR.15= 1);

    //GPT2参数设置
    CR.9 = 0 ;      // FRR, 触发比较后计数清0（restart mode） 
    CR.3= 1;        // WAITEN, 在在wait模式使能
    CR.5 = 1;        // STOPEN, 在Stop模式使能
    CR.4 = 1;        // DOZEEN, 在休眠模式使能
    CR.2 = 0;        // DBGEN, 在debug模式不使能
    CR.1 = 1;        // ENMOD, 不使能GPT2后计时器清0


    //CR.8-6 = 100, 设置GPT的时钟源为LowFreq
    //GPT_SetClockSource(base,kGPT_ClockSource_LowFreq);
          if (gptClkSource == kGPT_ClockSource_Osc)  //1不等于5
          else
                CR &=  ~(GPT_CR_CLKSRC_MASK | GPT_CR_EN_24M_MASK) ；   //CR.10,8-6=0,000
                CR |=  GPT_CR_CLKSRC(gptClkSource)；   //CR.8-6 =100,  LowFreq

  
    //PR.11-0=0, 设置GPT2的分频系数为1分频
    GPT_SetClockDivider(base, 1);
         //base->PR = (base->PR & ~GPT_PR_PRESCALER_MASK) | GPT_PR_PRESCALER(divider - 1U);
               PR &=   ~GPT_PR_PRESCALER_MASK          //PR.11-0=0
               PR |=GPT_PR_PRESCALER(divider - 1);          //PR.11-0=(1-1)=0






=======================切换power模式===休眠后的唤醒方法======================


flow： 

main -->  -->  -->  -->  -->  -->  -->  -->  -->  -->  -->   



------------------------------------------------------------------------------


main


    while(1)


              APP_ShowPowerMode(s_curRunMode);

              PRINTF("\r\nSelect the power mode \n\r\n");

              PRINTF("Press  %c : Over RUN           - Over Run mode\r\n",             'A' + LPM_PowerModeOverRun);
              PRINTF("Press  %c : Full RUN             - Full Run mode\r\n",               'A' + LPM_PowerModeFullRun);
              PRINTF("Press  %c : Low Speed RUN  - Low Speed Run mode\r\n",    'A' + LPM_PowerModeLowSpeedRun);
              PRINTF("Press  %c : Low Power RUN  - Low Power Run mode\r\n",    'A' + LPM_PowerModeLowPowerRun);
              PRINTF("Press  %c : System Idle         - Wait mode\r\n",                     'A' + LPM_PowerModeSysIdle);
              PRINTF("Press  %c : Low Power Idle   - Low Power Idle mode\r\n",     'A' + LPM_PowerModeLPIdle);
              PRINTF("Press  %c : Suspend             - Suspend mode\r\n",                'A' + LPM_PowerModeSuspend);
              PRINTF("Press  %c : SNVS                  - Shutdown the system\r\n",      'A' + LPM_PowerModeSNVS);

              PRINTF("\r\nWaiting for power mode select...\r\n\r\n");

              /* Wait for user response */
              ch = GETCHAR();

              if ((ch >= 'a') && (ch <= 'z'))
                  ch -= 'a' - 'A';

              s_targetPowerMode = (lpm_power_mode_t)(ch - 'A');

              //如果是 run mode, 不需要唤醒
              if (s_targetPowerMode <= LPM_PowerModeLowPowerRun)
                  needSetWakeup = false;                 
              else    
                  needSetWakeup = true;

              //如果需要唤醒，则進行唤醒设置
              if (needSetWakeup)

                  //取得唤醒方式
                  APP_GetWakeupConfig(s_targetPowerMode);

                  //设置唤醒方式
                  APP_SetWakeupConfig(s_targetPowerMode);


              //待理解  或为关闭uart的log打印
              APP_PowerPreSwitchHook(s_targetPowerMode);

              //切换电源模式
              APP_PowerModeSwitch(s_targetPowerMode);

               //初始化串口log打印
              APP_PowerPostSwitchHook(s_targetPowerMode);

  
              PRINTF("\r\nNext loop\r\n");



------------------
 //初始化串口log打印
APP_PowerPostSwitchHook(lpm_power_mode_t targetMode)
 
    if (targetMode > LPM_PowerModeRunEnd)   //如果该模式需要唤醒

        ReConfigUartRxPin();             //恢复uart的rx引脚设置
        BOARD_InitDebugConsole();  //初始化串口log打印

    else
          //APP_SetRunMode(targetMode);
                 s_curRunMode = powerMode;


-------------------

//切换电源模式
 APP_PowerModeSwitch(lpm_power_mode_t targetPowerMode)
 
    lpm_power_mode_t curRunMode = APP_GetRunMode();

    switch (targetPowerMode)
    
        case LPM_PowerModeOverRun:
            LPM_OverDriveRun(curRunMode);
            break;
        case LPM_PowerModeFullRun:
            LPM_FullSpeedRun(curRunMode);
            break;
        case LPM_PowerModeLowSpeedRun:
            LPM_LowSpeedRun(curRunMode);
            break;
        case LPM_PowerModeLowPowerRun:
            LPM_LowPowerRun(curRunMode);
            break;
        case LPM_PowerModeSysIdle:
            LPM_EnterSystemIdle(curRunMode);
            LPM_EnterSleepMode(kCLOCK_ModeWait);
            LPM_ExitSystemIdle(curRunMode);
            break;
        case LPM_PowerModeLPIdle:
            LPM_EnterLowPowerIdle(curRunMode);
            LPM_EnterSleepMode(kCLOCK_ModeWait);
            LPM_ExitLowPowerIdle(curRunMode);
            break;
        case LPM_PowerModeSuspend:
            LPM_EnterSuspend();
            LPM_EnterSleepMode(kCLOCK_ModeStop);
            break;
        case LPM_PowerModeSNVS:
            LPM_EnterSNVS();
            break;
        default:
            assert(false);
            break;
 

-----

//参数：LPM_PowerModeLowSpeedRun
LPM_LowSpeedRun( curRunMode)
 
        /* Decrease core frequency before decreasing power supply */
        ClockSetToLowSpeedRun();
        LPM_AdjustSystemSettings(curRunMode, LPM_PowerModeLowSpeedRun);
 



----------------------------------------

 //待理解  或为关闭uart的log打印
APP_PowerPreSwitchHook( targetMode )

    if (targetMode == LPM_PowerModeSNVS)
        PRINTF("Now shutting down the system...\r\n");

    if (targetMode > LPM_PowerModeRunEnd)    //如果该模式需要唤醒
   
        //等待直到所有的uart操作都已结束
        while (   !( 1<<22  &  LPUART_GetStatusFlags( LPUART1) )   ) ; //等待直到 STAT.22=0, FIFO.23,22,17,16=0000

        //待理解  或为关闭uart的log打印
        DbgConsole_Deinit();

        //把uart rx 设置成普通io口
        ConfigUartRxPinToGpio();
 


-----


//待理解
status_t DbgConsole_Deinit( ) 
 
        if (s_debugConsoleState.serialHandle != NULL)       

            SerialManager_CloseWriteHandle( ( &s_debugConsoleState.serialWriteHandleBuffer[0]));
       
  
        if (s_debugConsoleState.serialHandle != NULL)
      
             SerialManager_CloseReadHandle(( &s_debugConsoleState.serialReadHandleBuffer[0]));
       
 
        if (NULL != s_debugConsoleState.serialHandle)
 
              if (kStatus_SerialManager_Success == SerialManager_Deinit(s_debugConsoleState.serialHandle))
      
                    s_debugConsoleState.serialHandle = NULL;
                    g_serialHandle                   = NULL;       
 
 
        DEBUG_CONSOLE_DESTROY_BINARY_SEMAPHORE(s_debugConsoleReadWaitSemaphore);
  
        return  kStatus_Success;
 


-----------------

//待理解
serial_manager_status_t SerialManager_CloseWriteHandle( writeHandle)
 
    serial_manager_handle_t *handle;
    serial_manager_write_handle_t *serialWriteHandle;
    uint32_t primask;

    assert(NULL != writeHandle);

    serialWriteHandle = (serial_manager_write_handle_t *)writeHandle;
    handle            = (serial_manager_handle_t *)(void *)serialWriteHandle->serialManagerHandle;

    assert(NULL != handle);
 
    primask = DisableGlobalIRQ();
    if (handle->openedWriteHandleCount > 0U)
        handle->openedWriteHandleCount--;
 
    EnableGlobalIRQ(primask);

    memset(writeHandle, 0, SERIAL_MANAGER_WRITE_HANDLE_SIZE);

    return kStatus_SerialManager_Success;
 

------

//把uart rx 设置成普通io口
ConfigUartRxPinToGpio()
 
    IOMUXC_SetPinMux(IOMUXC_GPIO_09_GPIOMUX_IO09, 0);
    IOMUXC_SetPinConfig(IOMUXC_GPIO_09_GPIOMUX_IO09,  1<<12 | IOMUXC_SW_PAD_CTL_PAD_PUS(2) | 1<<13);
 

------


//输入参数： LPUART1
uint32_t LPUART_GetStatusFlags(  *base)
 
 
    temp = base->STAT;
 
    temp |= (base->FIFO &
             (LPUART_FIFO_TXEMPT_MASK | LPUART_FIFO_RXEMPT_MASK | LPUART_FIFO_TXOF_MASK | LPUART_FIFO_RXUF_MASK)) >>
            16U;
 
    /* Only keeps the status bits */
    temp &= (uint32_t)kLPUART_AllFlags;
    return temp;
 



----------------------------------------


//设置唤醒方式, 对各种唤醒方式都开中断
 APP_SetWakeupConfig( targetMode)
 
 
    if (kAPP_WakeupSourceTimer == s_wakeupSource)

        //如果是 SNVS，则选用 SRTC  
        if (targetMode == LPM_PowerModeSNVS)
     
            //停止 SRTC time counter 
            SNVS->LPCR &= ~SNVS_LPCR_SRTC_ENV_MASK;            //LPCR.0=0,   待验证 -- RM手册中没有这个bit的说明
            while ((SNVS->LPCR & SNVS_LPCR_SRTC_ENV_MASK)) ;
 

            //停止 SRTC alarm interrupt 
            SNVS->LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;             //LPCR.1=0,   待验证 -- RM手册中没有这个bit的说明
            while ((SNVS->LPCR & SNVS_LPCR_LPTA_EN_MASK)) ;
      

            SNVS->LPSRTCMR = 0x00;  //RTC.46-32     --待理解
            SNVS->LPSRTCLR = 0x00;    //RTC.31-0       --待理解

            //Set alarm 的秒数
            SNVS->LPTAR = s_wakeupTimeout;    //设置timeout时间，在RM中没有找到LPTAR这个寄存器（待验证）
            EnableIRQ(APP_WAKEUP_SNVS_IRQ);

           //使能 SRTC time counter and alarm interrupt  
            SNVS->LPCR |= （0<<1） | （1<<1）;     
            while (!(SNVS->LPCR & （1<<1） )) ;        

            //使能SNVS的GPC IRQ   (或作为唤醒用的IRQ)
            //LPM_EnableWakeupSource(APP_WAKEUP_SNVS_IRQ);   //46
                 GPC_EnableIRQ(GPC,46);


        else    //如果不是SNVS,则选用GPT
        
            //停止GPT2
            GPT_StopTimer(GPT2);

            //设置GPT2的timeout时间
            //GPT_SetOutputCompareValue(GPT2, 0, ( 32768  *  s_wakeupTimeout) - 1 );
                   base->OCR[0] = 32768  *  s_wakeupTimeout  - 1;

            //使能 channel1的中断
            //GPT_EnableInterrupts(GPT2, (1<<0) );
                   base->IR |= (1<<0) ;

            //清除以前的中断标志
            //NVIC_ClearPendingIRQ(31);
                     NVIC->ICPR[31>>5 ]= ( 1<< (31&0x1F) ) ; 

            // 使能GPT2的中断
            //NVIC_EnableIRQ(31);
                   NVIC->ISER[31>>5] = (1<<(31 & 0x1F) );

            //使能GPT2的中断，重复
            //EnableIRQ(31);
                  NVIC_EnableIRQ(interrupt);   //跟上面重复

            //开启GPT2计时
            GPT_StartTimer(GPT2);

            ////使能GPT2的GPC IRQ  (或作为唤醒用的IRQ)
            //LPM_EnableWakeupSource(31);
                   GPC_EnableIRQ(GPC, 31);
        

    else  //用按键作为唤醒方式

        //清除P1.0以前的中断标志
        //GPIO_ClearPinsInterruptFlags(GPIO1, 1 << 0);
        //       GPIO_PortClearInterruptFlags(GPIO1, 1 << 0);
                         GPIO1->ISR = 1 << 0;

        //使能P1.0中断
        //GPIO_EnableInterrupts(GPIO1, 1 << 0);
        //      GPIO_PortEnableInterrupts(GPIO1, 1 << 0);
                         GPIO1->IMR |= 1 << 0;

        //清除已悬挂的中断
        NVIC_ClearPendingIRQ(70);
               NVIC->ICPR[ 70 >> 5 ] =  (1  << ( 70  & 0x1F ) );

        //使能GPIO1_0_15 合并的IRQ
        NVIC_EnableIRQ(70);
              NVIC->ISER[ 70 >> 5 ] =  (1  << ( 70  & 0x1F ) );

        //使能GPIO1_0_15 合并的IRQ，重复
        EnableIRQ(70);
              NVIC_EnableIRQ(interrupt);    //跟上面重复


        //使能GPIO1_0_15 合并的 GPC IRQ   (或作为唤醒用的IRQ)
        //LPM_EnableWakeupSource(70);
                  GPC_EnableIRQ(GPC,70);



－－－－－－－－－－－－－－


//取得唤醒方式
APP_GetWakeupConfig( targetMode)
 
    //SNVS只有两种唤醒方式： WAKEUP pin 和 wake up source  
    if (targetMode == LPM_PowerModeSNVS) 
        s_wakeupSource = kAPP_WakeupSourceTimer; //因这里没有WAKEUP脚,只能用timeout
 
    else         
        //手动选择唤醒方式： T -- timeout  S -- button
        s_wakeupSource = APP_GetWakeupSource(targetMode);
 

    if (kAPP_WakeupSourceTimer == s_wakeupSource)
 
        //手动输入多长时间后唤醒
        s_wakeupTimeout = APP_GetWakeupTimeout();

        PRINTF("Will wakeup in %d seconds.\r\n", s_wakeupTimeout);
 
    else 
        PRINTF("Switch %s from off to on to wake up.\r\n", APP_WAKEUP_BUTTON_NAME);  //打印用哪个按键唤醒
 


－－－

//手动选择唤醒方式： T -- timeout  S -- button
app_wakeup_source_t APP_GetWakeupSource( targetMode)
 
    while (1)
 
        PRINTF("\r\nWaiting for key press..\r\n\r\n");

        ch = GETCHAR();

        if ((ch >= 'a') && (ch <= 'z'))
            ch -= 'a' - 'A';

        if (ch == 'T') 
            return kAPP_WakeupSourceTimer;   // T -- timeout
 
        else if (ch == 'S') 
            return kAPP_WakeupSourcePin;   // S -- button
 


－－－－－－－－－－－－


//手动输入多长时间后唤醒
 APP_GetWakeupTimeout()
 
    while (1) 

        PRINTF("The allowed range is 1s ~ 9s.\r\n");
        PRINTF("Eg. enter 5 to wake up in 5 seconds.\r\n");


        timeout = GETCHAR();
        PRINTF("%c\r\n", timeout);
        if ((timeout > '0') && (timeout <= '9'))
            return timeout - '0';

        PRINTF("Wrong value!\r\n");


 




   



