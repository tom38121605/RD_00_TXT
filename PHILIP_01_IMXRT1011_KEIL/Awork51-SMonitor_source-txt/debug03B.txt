

// 0x401F8090U  -- 是指P11的MUX模式寄存器
// 0x401F8140U  -- 是指P11的?寄存器
 
typedef struct {
  __IO uint32_t DR;                                /**< GPIO data register, offset: 0x0 */
  __IO uint32_t GDIR;                              /**< GPIO direction register, offset: 0x4 */
  __I  uint32_t PSR;                               /**< GPIO pad status register, offset: 0x8 */
  __IO uint32_t ICR1;                              /**< GPIO interrupt configuration register1, offset: 0xC */
  __IO uint32_t ICR2;                              /**< GPIO interrupt configuration register2, offset: 0x10 */
  __IO uint32_t IMR;                               /**< GPIO interrupt mask register, offset: 0x14 */
  __IO uint32_t ISR;                               /**< GPIO interrupt status register, offset: 0x18 */
  __IO uint32_t EDGE_SEL;                          /**< GPIO edge select register, offset: 0x1C */
       uint8_t RESERVED_0[100];
  __O  uint32_t DR_SET;                            /**< GPIO data register SET, offset: 0x84 */
  __O  uint32_t DR_CLEAR;                          /**< GPIO data register CLEAR, offset: 0x88 */
  __O  uint32_t DR_TOGGLE;                         /**< GPIO data register TOGGLE, offset: 0x8C */
} GPIO_Type;


#define GPIO1_BASE                               (0x401B8000u)
#define GPIO1                                        ((GPIO_Type *)GPIO1_BASE)
#define BOARD_USER_LED_GPIO             GPIO1
#define BOARD_USER_LED_GPIO_PIN      (11U)

#define EXAMPLE_LED_GPIO              BOARD_USER_LED_GPIO
#define EXAMPLE_LED_GPIO_PIN       BOARD_USER_LED_GPIO_PIN

 #define IOMUXC_GPIO_11_GPIOMUX_IO11 0x401F8090U, 0x5U, 0,    0, 0x401F8140U


#define IOMUXC_GPIO_09_LPUART1_RXD    0x401F8098U, 0x0U, 0x401F81F0U,    0x1U, 0x401F8148U

---

#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK      (0x7U)    //(7<<0)  
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT      (0U)
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(x)           (x<<0) &  (7 <<0  )
 
---

#define IOMUXC_SW_MUX_CTL_PAD_SION_MASK          (0x10U)   //(1<<4)
#define IOMUXC_SW_MUX_CTL_PAD_SION_SHIFT          (4U)
#define IOMUXC_SW_MUX_CTL_PAD_SION(x)                 (x<<4)   &  (1 <<4 )
 

---------------------

#define IOMUXC_GPIO_11_GPIOMUX_IO11             0x401F8090U, 0x5U, 0, 0, 0x401F8140U

#define IOMUXC_GPIO_AD_14_GPIOMUX_IO28       0x401F8010U, 0x5U, 0,     0, 0x401F80C0U

============================

typedef struct _gpio_pin_config
{
    gpio_pin_direction_t direction;  
    uint8_t outputLogic;          
    gpio_interrupt_mode_t         interruptMode;  
} gpio_pin_config_t;


typedef enum _gpio_pin_direction
{
    kGPIO_DigitalInput  = 0U,     //输入
    kGPIO_DigitalOutput = 1U,   //输出
} gpio_pin_direction_t;

 
typedef enum _gpio_interrupt_mode
{
    kGPIO_NoIntmode              = 0U,            //  无中断
    kGPIO_IntLowLevel            = 1U,             //  低电平触发
    kGPIO_IntHighLevel           = 2U,             // 高电平触发
    kGPIO_IntRisingEdge          = 3U,            // 上升沿触发
    kGPIO_IntFallingEdge         = 4U,            // 下降沿触发
    kGPIO_IntRisingOrFallingEdge = 5U,       // 边沿双向都触发
    
} gpio_interrupt_mode_t;


#define GPIO_CLOCKS                                                                                    
    {                                                                                                  
        kCLOCK_IpInvalid, kCLOCK_Gpio1, kCLOCK_Gpio2, kCLOCK_IpInvalid, kCLOCK_IpInvalid, kCLOCK_Gpio5  
    }



typedef enum _clock_gate_value
{
    kCLOCK_ClockNotNeeded     = 0U,               //Clock is off during all modes 
    kCLOCK_ClockNeededRun     = 1U,              //Clock is on in run mode, but off in WAIT and STOP modes  
    kCLOCK_ClockNeededRunWait = 3U,           //< Clock is on during all modes, except STOP mode  
} clock_gate_value_t;



    /* CCM CCGR4 */

    kCLOCK_Iomuxc       = (4U << 8U) | CCM_CCGR4_CG1_SHIFT,       //引脚复用时钟

    #define CCM_CCGR4_CG1_MASK                       (0xCU)
    #define CCM_CCGR4_CG1_SHIFT                      (2U)
    #define CCM_CCGR4_CG1(x)                        (  x << CCM_CCGR4_CG1_SHIFT ) & CCM_CCGR4_CG1_MASK







