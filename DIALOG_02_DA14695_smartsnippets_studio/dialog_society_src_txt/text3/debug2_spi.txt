 


=======================
 
 


static void periph_setup(void)
 
        hw_gpio_configure(wrbl_gpio_cfg);



------

nrf_gpio_cfg_input(JS_DW1000_RTLS_IRQ_PIN, NRF_GPIO_PIN_NOPULL); 		//irq



gpio_config wrbl_gpio_cfg[] = {

        /* UART2 */
        HW_GPIO_PINCONFIG(UART2_TX_PORT        , UART2_TX_PIN        , OUTPUT_PUSH_PULL , UART2_TX, true),

        /* UART1 */
        HW_GPIO_PINCONFIG(UART_TX_PORT         , UART_TX_PIN         , OUTPUT_PUSH_PULL , UART_TX , true),
        HW_GPIO_PINCONFIG(UART_RX_PORT         , UART_RX_PIN         , INPUT            , UART_RX , true),

        /* SPI1 */
        HW_GPIO_PINCONFIG(SPI1_CLK_GPIO_PORT   , SPI1_CLK_GPIO_PIN   , OUTPUT_PUSH_PULL , SPI_CLK , true),
        HW_GPIO_PINCONFIG(SPI1_DO_GPIO_PORT    , SPI1_DO_GPIO_PIN    , OUTPUT_PUSH_PULL , SPI_DO  , true),
        HW_GPIO_PINCONFIG(SPI1_DI_GPIO_PORT    , SPI1_DI_GPIO_PIN    , INPUT            , SPI_DI  , true),

        /* SPI2 */
        HW_GPIO_PINCONFIG(SPI2_CLK_PORT        , SPI2_CLK_PIN        , OUTPUT_PUSH_PULL , SPI2_CLK, false),
        HW_GPIO_PINCONFIG(SPI2_DO_PORT         , SPI2_DO_PIN         , OUTPUT_PUSH_PULL , SPI2_DO , false),

        /* I2C1 */
        HW_GPIO_PINCONFIG(I2C1_SCL_PORT        , I2C1_SCL_PIN        , OUTPUT_OPEN_DRAIN, I2C_SCL , false),
        HW_GPIO_PINCONFIG(I2C1_SDA_PORT        , I2C1_SDA_PIN        , OUTPUT_OPEN_DRAIN, I2C_SDA , false),

        /* BMI160 */
        HW_GPIO_PINCONFIG(BMI160_SPI_CS_PORT   , BMI160_SPI_CS_PIN   , OUTPUT_PUSH_PULL , SPI_EN  , true),

        /* BME280 */
        HW_GPIO_PINCONFIG(BME280_SPI_CS_PORT   , BME280_SPI_CS_PIN   , OUTPUT_PUSH_PULL , SPI_EN  , true),

        /* LS013B7DH03 display */
        HW_GPIO_PINCONFIG(LCD_SPI_CS_PORT      , LCD_SPI_CS_PIN      , OUTPUT_PUSH_PULL , GPIO    , true),

        /* Vibration */
        HW_GPIO_PINCONFIG(VIB_EN_PORT          , VIB_EN_PIN          , OUTPUT_PUSH_PULL , GPIO    , false),

        /* LA66002 NFC */
        HW_GPIO_PINCONFIG(LA66002_NFC_CLK_PORT  , LA66002_NFC_CLK_PIN  , OUTPUT_PUSH_PULL , PWM0    , false),
        HW_GPIO_PINCONFIG(LA66002_NFC_VDDSE_PORT, LA66002_NFC_VDDSE_PIN, INPUT            , GPIO    , true),

        /* IRQs */
#if dg_configIMAGE_SETUP == DEVELOPMENT_MODE    //No need to be configured, just for sanity check (duplicates, etc.)
        HW_GPIO_PINCONFIG(BMI160_INT_1_PORT    , BMI160_INT_1_PIN    , INPUT_PULLUP     , GPIO    , true),
        HW_GPIO_PINCONFIG(HW_BUTTON_PORT       , HW_BUTTON_PIN       , INPUT_PULLUP     , GPIO    , true),
        HW_GPIO_PINCONFIG(DI5115_OPT_INT_2_PORT, DI5115_OPT_INT_2_PIN, INPUT_PULLUP     , GPIO    , true),
        HW_GPIO_PINCONFIG(AB08X5_INT_D_PORT    , AB08X5_INT_D_PIN    , INPUT_PULLUP     , GPIO    , true),
        HW_GPIO_PINCONFIG(SX9300_IRQ_PORT      , SX9300_IRQ_PIN      , INPUT_PULLUP     , GPIO    , true),
#endif

        //--HW_GPIO_PINCONFIG(TP66_PORT            , TP66_PIN            , INPUT_PULLDOWN   , GPIO    , false),


        /* DW1000 */
        HW_GPIO_PINCONFIG(DW1000_SPI_CS_PORT   , DW1000_SPI_CS_PIN   , OUTPUT_PUSH_PULL , SPI_EN  , true),


        HW_GPIO_PINCONFIG_END // important!!!
};

=======================

wrbl_task(void *params)


        //-------------dw1000 ini------------------------------

//        hw_gpio_configure_pin(1, 5, HW_GPIO_MODE_OUTPUT, HW_GPIO_FUNC_SPI_EN, 1);
//        hw_gpio_configure_pin(3, 0, HW_GPIO_MODE_OUTPUT, HW_GPIO_FUNC_SPI_DO, 0);
//        hw_gpio_set_pin_function(3, 1, HW_GPIO_MODE_INPUT, HW_GPIO_FUNC_SPI_DI);
//        hw_gpio_configure_pin(3, 2, HW_GPIO_MODE_OUTPUT, HW_GPIO_FUNC_SPI_CLK, 0);


        //reset_DW1000();
        // --    //irq

        spi_set_rate_low();

        dw1000_init();
        ilocaladdr=0x80;
        da_delay_count(2000);

        dwt_entersleep();
        da_delay_count(2000);


        //-------------dw1000 ini--------end----------------------


        for (;;) 

                if(notif & WRBL_DECATIME_NOTIF)  //这个信号来自定时器
             
                        dw1000_twr_measure(0);



============================

void spi_set_rate_low(void)
{
        dev_dw1000 = ad_spi_open(DW1000SPI_2M);
}

void spi_set_rate_high(void)
{
        dev_dw1000 = ad_spi_open(DW1000SPI_8M);
}


void dw1000_spi_close(void)
{
    ad_spi_close(dev_dw1000);
}



------------------


SPI_BUS(SPI1)
        SPI_SLAVE_DEVICE(SPI1, BMI160, BMI160_SPI_CS_PORT, BMI160_SPI_CS_PIN,
                         HW_SPI_WORD_8BIT, HW_SPI_POL_HIGH, HW_SPI_PHA_MODE_1,
                         HW_SPI_FREQ_DIV_2, HW_DMA_CHANNEL_0);

        SPI_SLAVE_DEVICE(SPI1, BME280, BME280_SPI_CS_PORT, BME280_SPI_CS_PIN,
                         HW_SPI_WORD_8BIT, HW_SPI_POL_HIGH, HW_SPI_PHA_MODE_1,
                         HW_SPI_FREQ_DIV_2, HW_DMA_CHANNEL_0);

        //DW1000
        SPI_SLAVE_DEVICE(SPI1, DW1000SPI_2M, DW1000_SPI_CS_PORT, DW1000_SPI_CS_PIN, HW_SPI_WORD_8BIT,
                HW_SPI_POL_LOW , HW_SPI_PHA_MODE_0, HW_SPI_FREQ_DIV_8, 0);

        SPI_SLAVE_DEVICE(SPI1, DW1000SPI_8M, DW1000_SPI_CS_PORT, DW1000_SPI_CS_PIN, HW_SPI_WORD_8BIT,
                HW_SPI_POL_LOW , HW_SPI_PHA_MODE_0, HW_SPI_FREQ_DIV_2, 0);

        #define BMM150 BMI160

SPI_BUS_END






