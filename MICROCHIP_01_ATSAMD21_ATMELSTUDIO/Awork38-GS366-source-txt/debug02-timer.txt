 
=================初始化timer========================


flow：

   main --> configure_tc --> tc_get_config_defaults --> tc_init --> tc_enable 


--------------------------

int main

    configure_tc();  //定时器初始化配置  （设置定时器8位，分频，波形输出方式（待理解），装计数值和频率，pwm引脚）

  
----------------

//定时器初始化配置之一  （设置定时器8位，分频，波形输出方式（待理解），装计数值和频率，pwm引脚）
configure_tc( )
 
    struct tc_config config_tc;
 
    tc_get_config_defaults(&config_tc);
  

    // [setup_change_config]
    config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
    config_tc.clock_source = GCLK_GENERATOR_1;
   
    config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
   
    config_tc.counter_8_bit.period = 48;
    config_tc.counter_8_bit.compare_capture_channel[0] = 16;
    //config_tc.counter_8_bit.compare_capture_channel[1] = 54;


    //设置定时器8位，分频，波形输出方式（待理解），装计数值和频率，pwm引脚, 计数方向，设置重装计数和分频）
    tc_init(&tc_instance, TC3, &config_tc);

    //开启定时器
    tc_enable(&tc_instance);
        hw->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;     // CTRLA.1=1 


--------------------

 tc_get_config_defaults(  *const config) 

    /* Write default config to config struct */
    config->clock_source               = GCLK_GENERATOR_0;
    config->counter_size               = TC_COUNTER_SIZE_16BIT;
    config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    config->reload_action              = TC_RELOAD_ACTION_GCLK;
    config->run_in_standby             = false;

    config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;

    config->count_direction            = TC_COUNT_DIRECTION_UP;
    config->oneshot                    = false;

    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

    config->counter_16_bit.value                   = 0x0000;
    config->counter_16_bit.compare_capture_channel[0] = 0x0000;
    config->counter_16_bit.compare_capture_channel[1] = 0x0000;


------------
 
//定时器初始化配置之二  （设置定时器8位，分频，波形输出方式（待理解），装计数值和频率，pwm引脚, 计数方向，设置重装计数和分频）
参数1： TC3
参数2：config_tc
输出：tc_instance
tc_init(  struct tc_module *const module_inst,   hw,   *const config)  
 
    uint16_t ctrla_tmp = 0; 
    uint8_t ctrlbset_tmp = 0; 
    uint8_t ctrlc_tmp = 0; 

    //取得定时器编号
    uint8_t instance = _tc_get_inst_index(hw);   //instance =0

    //uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
        inst_gclk_id[] = { TC3_GCLK_ID, TC4_GCLK_ID, TC5_GCLK_ID, TC6_GCLK_ID, TC7_GCLK_ID }

    //uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
        inst_pm_apbmask[] = PM_APBCMASK_TC3,  PM_APBCMASK_TC4,  PM_APBCMASK_TC5,  PM_APBCMASK_TC6,  PM_APBCMASK_TC7,  

    struct system_pinmux_config pin_config;
    struct system_gclk_chan_config gclk_chan_config;
  
    module_inst->hw = hw;     //tc_instance.hw = TC3

    //判断定时器是否支持32位    //--忽略跳过
    if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&  ((instance + TC_INSTANCE_OFFSET) & 0x01)) 
        return STATUS_ERR_INVALID_ARG;

    module_inst->counter_size = config->counter_size;    //tc_instance.counter_size=TC_COUNTER_SIZE_8BIT

    if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST)    //如果 CTRLA.0=1
        return STATUS_BUSY;
 
    if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE)     //如果 STATUS.4=1
        return STATUS_ERR_DENIED;
 
    if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE)      //如果 CTRLA.1=1
        return STATUS_ERR_DENIED;


    // Set  PWM channel 0  （pwm引脚））
    if (config->pwm_channel[0].enabled) 
        system_pinmux_get_config_defaults(&pin_config);

        pin_config.mux_position = config->pwm_channel[0].pin_mux;  //设置io口的pwm复用功能
        pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;     //设置io为输出
        system_pinmux_pin_set_config( config->pwm_channel[0].pin_out, &pin_config); 

    //  Set  PWM channel1  （pwm引脚））
    if (config->pwm_channel[1].enabled) 
   
        system_pinmux_get_config_defaults(&pin_config);

        pin_config.mux_position = config->pwm_channel[1].pin_mux;   //设置io口的pwm复用功能
        pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;      //设置io为输出
        system_pinmux_pin_set_config( config->pwm_channel[1].pin_out, &pin_config);
  

   //-------------------时钟设置，先跳过----------------------------------------

    /* Enable the user interface clock in the PM */
    system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
            inst_pm_apbmask[instance]);

    /* Enable the slave counter if counter_size is 32 bit */
    if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    {
        /* Enable the user interface clock in the PM */
        system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
                inst_pm_apbmask[instance + 1]);
    }

    /* Setup clock for module */
    system_gclk_chan_get_config_defaults(&gclk_chan_config);
    gclk_chan_config.source_generator = config->clock_source;
    system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    system_gclk_chan_enable(inst_gclk_id[instance]);

   //------------------------时钟设置---end-----------------------------------


    //------配置CTRLA, 设置定时器8位，分频，波形输出方式（待理解），重装计数值和分频---
    ctrla_tmp =
            (uint32_t)config->counter_size |             //TC_COUNTER_SIZE_8BIT          //bit.2-3=1
            (uint32_t)config->wave_generation |     //TC_WAVE_GENERATION_NORMAL_FREQ    //bit.5-6=0  //--待理解
            (uint32_t)config->reload_action |          //TC_RELOAD_ACTION_GCLK       //bit.12-13=0   //关于重装计数值和分频值
            (uint32_t)config->clock_prescaler;        //TC_CLOCK_PRESCALER_DIV16   //bit.8-10=4

 
    if (config->run_in_standby)                        //false，跳过
        ctrla_tmp |= TC_CTRLA_RUNSTDBY;
  
    //while ( tc_is_syncing(module_inst) ) ;
         while （hw->COUNT8.STATUS.reg & TC_STATUS_SYNCBUSY) ;   //如果 STATUS.7==1，则等待

    hw->COUNT8.CTRLA.reg = ctrla_tmp;


     //------配置CTRLBSET , (计数方向) ------

    if (config->oneshot)      //if 0                                   
        ctrlbset_tmp = TC_CTRLBSET_ONESHOT;   //bit.2=1

    if (config->count_direction)  //if 0                          
        ctrlbset_tmp |= TC_CTRLBSET_DIR;    //bit.0=1 
 
    hw->COUNT8.CTRLBCLR.reg = 0xFF;

    if (ctrlbset_tmp) //如果上面的两个值需要配置 （不都为0）
 
        hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;


    //------配置CTRLC , ( 使能pwm，设置电平反转 ) ------

    ctrlc_tmp = config->waveform_invert_output;      //TC_WAVEFORM_INVERT_OUTPUT_NONE=0

   //是否开pwm
    for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++)   //2
     
        if (config->enable_capture_on_channel[i] == true)  
            ctrlc_tmp |= ( TC_CTRLC_CPTEN(1) << i );  //bit.4=1, 或bit.5=1
  
    hw->COUNT8.CTRLC.reg = ctrlc_tmp;

 
    switch (module_inst->counter_size) 
        case TC_COUNTER_SIZE_8BIT:

            hw->COUNT8.COUNT.reg =  config->counter_8_bit.value;     //设置定时器计数值
            hw->COUNT8.PER.reg =    config->counter_8_bit.period;       //设置定时器周期
            hw->COUNT8.CC[0].reg =  config->counter_8_bit.compare_capture_channel[0];   //设置定时器比较值0
            hw->COUNT8.CC[1].reg =   config->counter_8_bit.compare_capture_channel[1];   //设置定时器比较值1

  
 ---------


//取得定时器编号
参数：TC3
_tc_get_inst_index( hw) 
 
    Tc *tc_modules[TC_INST_NUM] = TC_INSTS;
 
    for (uint32_t i = 0; i < TC_INST_NUM; i++) 
        if (hw == tc_modules[i])  
            return i;
         
     

=================timer定时翻转led========================

main -->   configure_tc_callbacks  -->  tc_register_callback  --> tc_enable_callback   -->  tc_callback_to_toggle_led


------------------------------------------

int main

    configure_tc_callbacks();
 
   //开启全局中断
   //system_interrupt_enable_global();
       //cpu_irq_enable()
           //__enable_irq(); 
               __ASM volatile ("cpsie i");


-----------


 configure_tc_callbacks( )
 
    tc_register_callback(&tc_instance, tc_callback_to_toggle_led,  TC_CALLBACK_OVERFLOW);
    tc_register_callback(&tc_instance, tc_callback_to_toggle_led,  TC_CALLBACK_CC_CHANNEL0);         
           
    tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
    tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
  
 
---------

//参数1： tc_instance                         （定时器实体）
//参数2： tc_callback_to_toggle_led   （中断函数）
//参数3： TC_CALLBACK_OVERFLOW  （中断类型）
 tc_register_callback(  * module,  callback_func, callback_type)
 
    /* Register callback function */
    module->callback[callback_type] = callback_func;

    /* Set the bit corresponding to the callback_type */
    if (callback_type == TC_CALLBACK_CC_CHANNEL0) 
        module->register_callback_mask |= TC_INTFLAG_MC(1);
     
    else if (callback_type == TC_CALLBACK_CC_CHANNEL1)  
        module->register_callback_mask |= TC_INTFLAG_MC(2);
     
    else  
        module->register_callback_mask |= (1 << callback_type);
     
     


----------------------------------------------


//定时器中断程序
参数：tc_instance
tc_callback_to_toggle_led(  *module_inst )

    port_pin_toggle_output_level(LED0_PIN);

 









